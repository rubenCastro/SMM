/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package p5;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Arc2D;
import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.util.ArrayList;
import java.util.Iterator;

/**
 *
 * @author jacortes
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    private Rectangle rectangle;
    private Point p;
    private Boolean move = false;
    ArrayList<Shape> figuresList = new ArrayList<>();

    public MainWindow() {

        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        moveCheckBox = new javax.swing.JCheckBox();
        drawPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        moveCheckBox.setText("Move?");
        moveCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveCheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(moveCheckBox, java.awt.BorderLayout.SOUTH);

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );

        getContentPane().add(drawPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        p = evt.getPoint();
        if (move) {
            rectangle = (Rectangle) getSelectedShape(p);
        } else {
            rectangle = new Rectangle(p);
            figuresList.add(rectangle);
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        this.formMouseDragged(evt);
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (move) {
            if (rectangle != null) {
                rectangle.setLocation(evt.getPoint());
            }
        } else {
            ((Rectangle) figuresList.get(figuresList.size() - 1)).setFrameFromDiagonal(p, evt.getPoint());
        }
        repaint();
    }//GEN-LAST:event_formMouseDragged

    private void moveCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveCheckBoxActionPerformed
        if (moveCheckBox.isSelected()) {
            move = true;
        } else {
            move = false;
        }
    }//GEN-LAST:event_moveCheckBoxActionPerformed

    private void figuresTest(Graphics g) {
        Graphics2D g2d = (Graphics2D) g;
        Point p1 = new Point(40, 40);
        Point p2 = new Point(200, 200);
        ArrayList<Shape> figuresList = new ArrayList<>();
        Line2D line = new Line2D.Float(p1, p2);
        Rectangle2D rectangle = new Rectangle2D.Float(p1.x, p1.y, 80, 80);
        RoundRectangle2D rrectangle = new RoundRectangle2D.Float(p1.x + 15, p1.y + 15, 100, 100, 10, 10);
        Ellipse2D ellipse = new Ellipse2D.Float(p1.x, p1.y, 100, 100);
        Arc2D arc = new Arc2D.Float(p1.x + 89, p1.y + 46, 100, 100, 90, 135, Arc2D.OPEN);
        figuresList.add(arc);
        figuresList.add(line);
        figuresList.add(rectangle);
        figuresList.add(rrectangle);
        figuresList.add(ellipse);
        for (Iterator<Shape> iterator = figuresList.iterator(); iterator.hasNext();) {
            Shape next = iterator.next();
            g2d.draw(next);
        }
        Area pear = new Area(ellipse);
        Area pear2 = new Area(rectangle);
        pear.subtract(pear2);
        g2d.fill(pear);

    }

    private Shape getSelectedShape(Point p) {
        for (Iterator<Shape> iterator = figuresList.iterator(); iterator.hasNext();) {
            Shape next = iterator.next();
            if (next.contains(p)) {
                return next;
            }
        }
        return null;
    }

    @Override
    public void paint(Graphics g) {
        //figuresTest(g);
        super.paint(g);
        Graphics2D g2d = (Graphics2D) g;
        for (Iterator<Shape> iterator = figuresList.iterator(); iterator.hasNext();) {
            Shape next = iterator.next();
            g2d.fill(next);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel drawPanel;
    private javax.swing.JCheckBox moveCheckBox;
    // End of variables declaration//GEN-END:variables
}
