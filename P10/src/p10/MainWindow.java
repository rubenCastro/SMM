/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package p10;

import java.awt.Color;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.io.File;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.SpinnerNumberModel;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.jaci.ui.CanvasParameters;
import sm.jaci.ui.FigureTypes;
import sm.jaci.ui.MyInternalFrame;

/**
 *
 * @author jacortes
 */
public class MainWindow extends javax.swing.JFrame {

    CanvasParameters currentParameters = new CanvasParameters();
    BufferedImage sourceImage;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        this.setLocationRelativeTo(null);
        ((SpinnerNumberModel) thicknessSpinner.getModel()).setMinimum(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        figuresButtonGroup = new javax.swing.ButtonGroup();
        colorsButtonGroup = new javax.swing.ButtonGroup();
        figuresToolBar = new javax.swing.JToolBar();
        newButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        dotToggleButton = new javax.swing.JToggleButton();
        lineToggleButton = new javax.swing.JToggleButton();
        rectanbleToggleButton = new javax.swing.JToggleButton();
        ellipseToggleButton = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        colorsComboBox = new javax.swing.JComboBox<>();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        thicknessSpinner = new javax.swing.JSpinner();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        fillToggleButton = new javax.swing.JToggleButton();
        alphaToggleButton = new javax.swing.JToggleButton();
        smoothToggleButton = new javax.swing.JToggleButton();
        canvasDesktopPanel = new javax.swing.JDesktopPane();
        bottomPanel = new javax.swing.JPanel();
        statusPanel = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        bottomToolBar = new javax.swing.JToolBar();
        brightnessPanel = new javax.swing.JPanel();
        brightSlider = new javax.swing.JSlider();
        filtersPanel = new javax.swing.JPanel();
        filtersComboBox = new javax.swing.JComboBox<>();
        contrastPanel = new javax.swing.JPanel();
        normalContrastButton = new javax.swing.JButton();
        lightContrastButton = new javax.swing.JButton();
        darkContrastButton = new javax.swing.JButton();
        functionPanel = new javax.swing.JPanel();
        sinButton = new javax.swing.JButton();
        rotationPanel = new javax.swing.JPanel();
        rotationSlider = new javax.swing.JSlider();
        r90Button = new javax.swing.JButton();
        r180Button = new javax.swing.JButton();
        r270Button = new javax.swing.JButton();
        scalePanel = new javax.swing.JPanel();
        plusButton = new javax.swing.JButton();
        minusButton = new javax.swing.JButton();
        topMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        statusMenuItem = new javax.swing.JMenuItem();
        figuresMenuItem = new javax.swing.JMenuItem();
        attributesMenuItem = new javax.swing.JMenuItem();
        rescaleMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Basic 2D Paint");

        figuresToolBar.setRollover(true);

        newButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p10/nuevo.png"))); // NOI18N
        newButton.setFocusable(false);
        newButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newButton.setMaximumSize(new java.awt.Dimension(36, 36));
        newButton.setMinimumSize(new java.awt.Dimension(36, 36));
        newButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        figuresToolBar.add(newButton);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p10/abrir.png"))); // NOI18N
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        figuresToolBar.add(openButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p10/guardar.png"))); // NOI18N
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setMaximumSize(new java.awt.Dimension(36, 36));
        saveButton.setMinimumSize(new java.awt.Dimension(36, 36));
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        figuresToolBar.add(saveButton);
        figuresToolBar.add(jSeparator1);

        figuresButtonGroup.add(dotToggleButton);
        dotToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/punto.png"))); // NOI18N
        dotToggleButton.setFocusable(false);
        dotToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dotToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        dotToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dotToggleButtonActionPerformed(evt);
            }
        });
        figuresToolBar.add(dotToggleButton);

        figuresButtonGroup.add(lineToggleButton);
        lineToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/linea.png"))); // NOI18N
        lineToggleButton.setFocusable(false);
        lineToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lineToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lineToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineToggleButtonActionPerformed(evt);
            }
        });
        figuresToolBar.add(lineToggleButton);

        figuresButtonGroup.add(rectanbleToggleButton);
        rectanbleToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/rectangulo.png"))); // NOI18N
        rectanbleToggleButton.setFocusable(false);
        rectanbleToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectanbleToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectanbleToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectanbleToggleButtonActionPerformed(evt);
            }
        });
        figuresToolBar.add(rectanbleToggleButton);

        figuresButtonGroup.add(ellipseToggleButton);
        ellipseToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/elipse.png"))); // NOI18N
        ellipseToggleButton.setFocusable(false);
        ellipseToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ellipseToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ellipseToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ellipseToggleButtonActionPerformed(evt);
            }
        });
        figuresToolBar.add(ellipseToggleButton);

        jToggleButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p10/seleccion.png"))); // NOI18N
        jToggleButton4.setFocusable(false);
        jToggleButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        figuresToolBar.add(jToggleButton4);
        figuresToolBar.add(jSeparator2);

        colorsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Black", "White", "Red", "Yellow", "Blue", "Green" }));
        colorsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorsComboBoxActionPerformed(evt);
            }
        });
        figuresToolBar.add(colorsComboBox);
        figuresToolBar.add(jSeparator4);

        thicknessSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thicknessSpinnerStateChanged(evt);
            }
        });
        figuresToolBar.add(thicknessSpinner);
        figuresToolBar.add(jSeparator3);

        fillToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p10/rellenar.png"))); // NOI18N
        fillToggleButton.setFocusable(false);
        fillToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fillToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        fillToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillToggleButtonActionPerformed(evt);
            }
        });
        figuresToolBar.add(fillToggleButton);

        alphaToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p10/transparencia.png"))); // NOI18N
        alphaToggleButton.setFocusable(false);
        alphaToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alphaToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alphaToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alphaToggleButtonActionPerformed(evt);
            }
        });
        figuresToolBar.add(alphaToggleButton);

        smoothToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p10/alisar.png"))); // NOI18N
        smoothToggleButton.setFocusable(false);
        smoothToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        smoothToggleButton.setMaximumSize(new java.awt.Dimension(36, 36));
        smoothToggleButton.setMinimumSize(new java.awt.Dimension(36, 36));
        smoothToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        smoothToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smoothToggleButtonActionPerformed(evt);
            }
        });
        figuresToolBar.add(smoothToggleButton);

        getContentPane().add(figuresToolBar, java.awt.BorderLayout.NORTH);

        canvasDesktopPanel.setOpaque(false);
        canvasDesktopPanel.setPreferredSize(new java.awt.Dimension(800, 600));
        getContentPane().add(canvasDesktopPanel, java.awt.BorderLayout.CENTER);

        bottomPanel.setLayout(new java.awt.BorderLayout());

        statusPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        statusPanel.setLayout(new java.awt.BorderLayout());

        statusLabel.setText("Waiting...");
        statusPanel.add(statusLabel, java.awt.BorderLayout.CENTER);

        bottomPanel.add(statusPanel, java.awt.BorderLayout.SOUTH);

        bottomToolBar.setRollover(true);

        brightnessPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Brightness"));
        brightnessPanel.setPreferredSize(new java.awt.Dimension(120, 100));
        brightnessPanel.setLayout(new java.awt.GridLayout(2, 3, 1, 1));

        brightSlider.setMaximum(255);
        brightSlider.setMinimum(-255);
        brightSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brightSliderStateChanged(evt);
            }
        });
        brightSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                brightSliderFocusLost(evt);
            }
        });
        brightnessPanel.add(brightSlider);

        bottomToolBar.add(brightnessPanel);

        filtersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Filters"));
        filtersPanel.setPreferredSize(new java.awt.Dimension(120, 100));

        filtersComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Fronteras" }));
        filtersComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtersComboBoxActionPerformed(evt);
            }
        });
        filtersPanel.add(filtersComboBox);

        bottomToolBar.add(filtersPanel);

        contrastPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Contrast"));
        contrastPanel.setPreferredSize(new java.awt.Dimension(200, 100));

        normalContrastButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p10/contraste.png"))); // NOI18N
        normalContrastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalContrastButtonActionPerformed(evt);
            }
        });
        contrastPanel.add(normalContrastButton);

        lightContrastButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p10/iluminar.png"))); // NOI18N
        lightContrastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lightContrastButtonActionPerformed(evt);
            }
        });
        contrastPanel.add(lightContrastButton);

        darkContrastButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p10/oscurecer.png"))); // NOI18N
        darkContrastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                darkContrastButtonActionPerformed(evt);
            }
        });
        contrastPanel.add(darkContrastButton);

        bottomToolBar.add(contrastPanel);

        functionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Function"));
        functionPanel.setPreferredSize(new java.awt.Dimension(120, 100));

        sinButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p10/sinusoidal.png"))); // NOI18N
        sinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinButtonActionPerformed(evt);
            }
        });
        functionPanel.add(sinButton);

        bottomToolBar.add(functionPanel);

        rotationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotation"));
        rotationPanel.setPreferredSize(new java.awt.Dimension(220, 100));

        rotationSlider.setMaximum(360);
        rotationSlider.setValue(180);
        rotationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rotationSliderStateChanged(evt);
            }
        });
        rotationSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rotationSliderFocusLost(evt);
            }
        });
        rotationPanel.add(rotationSlider);

        r90Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p10/rotacion90.png"))); // NOI18N
        r90Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r90ButtonActionPerformed(evt);
            }
        });
        rotationPanel.add(r90Button);

        r180Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p10/rotacion180.png"))); // NOI18N
        r180Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r180ButtonActionPerformed(evt);
            }
        });
        rotationPanel.add(r180Button);

        r270Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p10/rotacion270.png"))); // NOI18N
        r270Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                r270ButtonActionPerformed(evt);
            }
        });
        rotationPanel.add(r270Button);

        bottomToolBar.add(rotationPanel);

        scalePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Scale"));
        scalePanel.setPreferredSize(new java.awt.Dimension(130, 100));

        plusButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p10/aumentar.png"))); // NOI18N
        plusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusButtonActionPerformed(evt);
            }
        });
        scalePanel.add(plusButton);

        minusButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/p10/disminuir.png"))); // NOI18N
        minusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusButtonActionPerformed(evt);
            }
        });
        scalePanel.add(minusButton);

        bottomToolBar.add(scalePanel);

        bottomPanel.add(bottomToolBar, java.awt.BorderLayout.CENTER);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);

        fileMenu.setText("File");

        newMenuItem.setText("New");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        topMenuBar.add(fileMenu);

        editMenu.setText("Edit");

        statusMenuItem.setText("Show status bar");
        statusMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(statusMenuItem);

        figuresMenuItem.setText("Show figures bar");
        figuresMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                figuresMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(figuresMenuItem);

        attributesMenuItem.setText("Show attributes bar");
        attributesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attributesMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(attributesMenuItem);

        rescaleMenuItem.setText("Rescale");
        rescaleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rescaleMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(rescaleMenuItem);

        topMenuBar.add(editMenu);

        setJMenuBar(topMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        MyInternalFrame mif = new MyInternalFrame();
        if (canvasDesktopPanel.getAllFrames().length != 0) {
            CanvasParameters currentParametersAux = new CanvasParameters();
            currentParametersAux.setActive_color(currentParameters.getActive_color());
            currentParametersAux.setFigureType(currentParameters.getFigureType());
            currentParametersAux.setThickness(currentParameters.getThickness());
            currentParametersAux.setAlpha(currentParameters.getAlpha());
            currentParametersAux.setFilled(currentParameters.getFilled());
            currentParametersAux.setAliasing(currentParameters.getAliasing());
            currentParametersAux.setEdit(currentParameters.getEdit());
            mif.getCanvas2d().setParameters(currentParametersAux);
        }
        BufferedImage img;
        img = new BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB);
        mif.getCanvas2d().setImage(img);
        canvasDesktopPanel.add(mif);
        mif.setVisible(true);
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void applyLookUpOp(int type) {
        MyInternalFrame mif = (MyInternalFrame) (canvasDesktopPanel.getSelectedFrame());
        if (mif != null) {
            BufferedImage imgSource = mif.getCanvas2d().getImage();
            if (imgSource != null) {
                try {
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(imgSource, imgSource);
                    mif.repaint();
                } catch (Exception e) {
                    System.err.println("Error:" + e.getLocalizedMessage());
                }
            }
        }
    }

    private void applyRotation(double radians, BufferedImage sourceImg) {
        MyInternalFrame mif = (MyInternalFrame) canvasDesktopPanel.getSelectedFrame();
        if (mif != null) {
            if (sourceImg == null) {
                sourceImg = mif.getCanvas2d().getImage();
            }
            if (sourceImg != null) {
                try {
                    AffineTransform at = AffineTransform.getRotateInstance(radians, sourceImg.getWidth() / 2, sourceImg.getHeight() / 2);
                    AffineTransformOp op = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage destImg = op.filter(sourceImg, null);
                    mif.getCanvas2d().setImage(destImg);
                    mif.getCanvas2d().repaint();
                } catch (Exception e) {
                    System.err.println("Error: " + e.getLocalizedMessage());
                }
            }
        }
    }

    private void applyScale(double scaleFactor, BufferedImage sourceImg) {
        MyInternalFrame mif = (MyInternalFrame) canvasDesktopPanel.getSelectedFrame();
        if (mif != null) {
            if (sourceImg == null) {
                sourceImg = mif.getCanvas2d().getImage();
            }
            if (sourceImg != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(scaleFactor, scaleFactor);
                    AffineTransformOp op = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage destImg = op.filter(sourceImg, null);
                    mif.getCanvas2d().setImage(destImg);
                    mif.getCanvas2d().repaint();
                } catch (Exception e) {
                    System.err.println("Error: " + e.getLocalizedMessage());
                }
            }
        }
    }
    private void statusMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusMenuItemActionPerformed
        if (statusPanel.isVisible()) {
            statusPanel.setVisible(false);
        } else {
            statusPanel.setVisible(true);
        }
    }//GEN-LAST:event_statusMenuItemActionPerformed

    private void figuresMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_figuresMenuItemActionPerformed
        if (figuresToolBar.isVisible()) {
            figuresToolBar.setVisible(false);
        } else {
            figuresToolBar.setVisible(true);
        }
    }//GEN-LAST:event_figuresMenuItemActionPerformed

    private void attributesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attributesMenuItemActionPerformed
        if (bottomToolBar.isVisible()) {
            bottomToolBar.setVisible(false);
        } else {
            bottomToolBar.setVisible(true);
        }
    }//GEN-LAST:event_attributesMenuItemActionPerformed

    private void dotToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dotToggleButtonActionPerformed
        MyInternalFrame mif;
        mif = (MyInternalFrame) canvasDesktopPanel.getSelectedFrame();
        if (mif != null) {
            currentParameters.setFigureType(FigureTypes.DOT);
            mif.getCanvas2d().getParameters().setFigureType(FigureTypes.DOT);
        }
    }//GEN-LAST:event_dotToggleButtonActionPerformed

    private void lineToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineToggleButtonActionPerformed
        MyInternalFrame mif;
        mif = (MyInternalFrame) canvasDesktopPanel.getSelectedFrame();
        if (mif != null) {
            currentParameters.setFigureType(FigureTypes.LINE);
            mif.getCanvas2d().getParameters().setFigureType(FigureTypes.LINE);
        }
    }//GEN-LAST:event_lineToggleButtonActionPerformed

    private void rectanbleToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectanbleToggleButtonActionPerformed
        MyInternalFrame mif;
        mif = (MyInternalFrame) canvasDesktopPanel.getSelectedFrame();
        if (mif != null) {
            currentParameters.setFigureType(FigureTypes.RECTANGLE);
            mif.getCanvas2d().getParameters().setFigureType(FigureTypes.RECTANGLE);
        }
    }//GEN-LAST:event_rectanbleToggleButtonActionPerformed

    private void ellipseToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ellipseToggleButtonActionPerformed
        MyInternalFrame mif;
        mif = (MyInternalFrame) canvasDesktopPanel.getSelectedFrame();
        if (mif != null) {
            currentParameters.setFigureType(FigureTypes.ELLIPSE);
            mif.getCanvas2d().getParameters().setFigureType(FigureTypes.ELLIPSE);
        }
    }//GEN-LAST:event_ellipseToggleButtonActionPerformed

    private void thicknessSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thicknessSpinnerStateChanged
        MyInternalFrame mif;
        mif = (MyInternalFrame) canvasDesktopPanel.getSelectedFrame();
        if (mif != null) {
            Integer thickness = Integer.parseInt(thicknessSpinner.getModel().getValue().toString());
            currentParameters.setThickness(thickness);
            mif.getCanvas2d().getParameters().setThickness(thickness);
        }
    }//GEN-LAST:event_thicknessSpinnerStateChanged

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                MyInternalFrame mif = new MyInternalFrame();
                mif.getCanvas2d().setImage(img);
                this.canvasDesktopPanel.add(mif);
                mif.setTitle(f.getName());
                mif.setVisible(true);
            } catch (Exception ex) {
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        MyInternalFrame mif = (MyInternalFrame) canvasDesktopPanel.getSelectedFrame();
        if (mif != null) {
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    BufferedImage img = mif.getCanvas2d().getImage(true);
                    if (img != null) {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        mif.setTitle(f.getName());
                    }
                } catch (Exception ex) {
                    System.err.println("Error al guardar la imagen");
                }
            }
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void rescaleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rescaleMenuItemActionPerformed
        MyInternalFrame mif = (MyInternalFrame) (canvasDesktopPanel.getSelectedFrame());
        if (mif != null) {
            BufferedImage imgSource = mif.getCanvas2d().getImage();
            if (imgSource != null) {
                try {
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    BufferedImage destImg = rop.filter(imgSource, null);
                    mif.getCanvas2d().setImage(destImg);
                    mif.getCanvas2d().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_rescaleMenuItemActionPerformed

    private void brightSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brightSliderStateChanged
        if (sourceImage == null) {
            MyInternalFrame mif = (MyInternalFrame) (canvasDesktopPanel.getSelectedFrame());
            sourceImage = mif.getCanvas2d().getImage();
        } else {
            MyInternalFrame mif = (MyInternalFrame) (canvasDesktopPanel.getSelectedFrame());
            if (mif != null) {
                if (sourceImage != null) {
                    try {
                        RescaleOp rop = new RescaleOp(1.0F, brightSlider.getValue(), null);
                        BufferedImage destImg = rop.filter(sourceImage, null);
                        mif.getCanvas2d().setImage(destImg);
                        mif.getCanvas2d().repaint();
                    } catch (IllegalArgumentException e) {
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_brightSliderStateChanged

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        MyInternalFrame mif = new MyInternalFrame();
        if (canvasDesktopPanel.getAllFrames().length != 0) {
            CanvasParameters currentParametersAux = new CanvasParameters();
            currentParametersAux.setActive_color(currentParameters.getActive_color());
            currentParametersAux.setFigureType(currentParameters.getFigureType());
            currentParametersAux.setThickness(currentParameters.getThickness());
            currentParametersAux.setAlpha(currentParameters.getAlpha());
            currentParametersAux.setFilled(currentParameters.getFilled());
            currentParametersAux.setAliasing(currentParameters.getAliasing());
            currentParametersAux.setEdit(currentParameters.getEdit());
            mif.getCanvas2d().setParameters(currentParametersAux);
        }
        BufferedImage img;
        img = new BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB);
        img.createGraphics().setPaint(Color.white);
        img.createGraphics().fill(new Rectangle2D.Float(0.0f, 0.0f, img.getWidth(), img.getHeight()));
        mif.getCanvas2d().setImage(img);
        canvasDesktopPanel.add(mif);
        mif.setVisible(true);
    }//GEN-LAST:event_newButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                MyInternalFrame mif = new MyInternalFrame();
                mif.getCanvas2d().setImage(img);
                this.canvasDesktopPanel.add(mif);
                mif.setTitle(f.getName());
                mif.setVisible(true);
            } catch (Exception ex) {
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void fillToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillToggleButtonActionPerformed
        MyInternalFrame mif;
        mif = (MyInternalFrame) canvasDesktopPanel.getSelectedFrame();
        if (mif != null) {
            if (fillToggleButton.isSelected()) {
                currentParameters.setFilled(true);
                mif.getCanvas2d().getParameters().setFilled(true);
            } else {
                currentParameters.setFilled(false);
                mif.getCanvas2d().getParameters().setFilled(false);
            }
        }
    }//GEN-LAST:event_fillToggleButtonActionPerformed

    private void alphaToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alphaToggleButtonActionPerformed
        MyInternalFrame mif;
        mif = (MyInternalFrame) canvasDesktopPanel.getSelectedFrame();
        if (mif != null) {
            if (alphaToggleButton.isSelected()) {
                currentParameters.setAlpha(true);
                mif.getCanvas2d().getParameters().setAlpha(true);
            } else {
                currentParameters.setAlpha(false);
                mif.getCanvas2d().getParameters().setAlpha(false);
            }

        }
    }//GEN-LAST:event_alphaToggleButtonActionPerformed

    private void smoothToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smoothToggleButtonActionPerformed
        MyInternalFrame mif;
        mif = (MyInternalFrame) canvasDesktopPanel.getSelectedFrame();
        if (mif != null) {
            if (smoothToggleButton.isSelected()) {
                currentParameters.setAliasing(true);
                mif.getCanvas2d().getParameters().setAliasing(true);
            } else {
                currentParameters.setAliasing(false);
                mif.getCanvas2d().getParameters().setAliasing(false);
            }

        }
    }//GEN-LAST:event_smoothToggleButtonActionPerformed

    private void colorsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorsComboBoxActionPerformed
        MyInternalFrame mif;
        ArrayList<Color> coloursList = new ArrayList<>();
        coloursList.add(Color.BLACK);
        coloursList.add(Color.WHITE);
        coloursList.add(Color.RED);
        coloursList.add(Color.YELLOW);
        coloursList.add(Color.BLUE);
        coloursList.add(Color.GREEN);
        mif = (MyInternalFrame) canvasDesktopPanel.getSelectedFrame();
        if (mif != null) {
            currentParameters.setActive_color(coloursList.get(colorsComboBox.getSelectedIndex()));
            mif.getCanvas2d().getParameters().setActive_color(coloursList.get(colorsComboBox.getSelectedIndex()));
        }
    }//GEN-LAST:event_colorsComboBoxActionPerformed

    private void brightSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brightSliderFocusLost
        brightSlider.setValue(0);
    }//GEN-LAST:event_brightSliderFocusLost

    private void normalContrastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalContrastButtonActionPerformed
        applyLookUpOp(1);
    }//GEN-LAST:event_normalContrastButtonActionPerformed

    private void lightContrastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lightContrastButtonActionPerformed
        applyLookUpOp(4);
    }//GEN-LAST:event_lightContrastButtonActionPerformed

    private void darkContrastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_darkContrastButtonActionPerformed
        applyLookUpOp(3);
    }//GEN-LAST:event_darkContrastButtonActionPerformed

    private void r90ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r90ButtonActionPerformed
        applyRotation(Math.toRadians(90.0D), null);
    }//GEN-LAST:event_r90ButtonActionPerformed

    private void r180ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r180ButtonActionPerformed
        applyRotation(Math.toRadians(180.0D), null);
    }//GEN-LAST:event_r180ButtonActionPerformed

    private void r270ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_r270ButtonActionPerformed
        applyRotation(Math.toRadians(270.0D), null);
    }//GEN-LAST:event_r270ButtonActionPerformed

    private void rotationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rotationSliderStateChanged
        applyRotation(Math.toRadians(rotationSlider.getValue()), sourceImage);
    }//GEN-LAST:event_rotationSliderStateChanged

    private void rotationSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotationSliderFocusLost
        rotationSlider.setValue(0);
    }//GEN-LAST:event_rotationSliderFocusLost

    private void plusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusButtonActionPerformed
        applyScale(1.25D, null);
    }//GEN-LAST:event_plusButtonActionPerformed

    private void minusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusButtonActionPerformed
        applyScale(0.75D, null);
    }//GEN-LAST:event_minusButtonActionPerformed

    private void sinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinButtonActionPerformed
        MyInternalFrame mif = (MyInternalFrame) canvasDesktopPanel.getSelectedFrame();
        if (mif != null) {
            BufferedImage imgSource = mif.getCanvas2d().getImage();
            if (imgSource != null) {
                try {
                    LookupTable lt = LookupTableProducer.createLookupTable(4);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(imgSource, imgSource);
                    mif.repaint();
                } catch (Exception e) {
                    System.err.println("Error: " + e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sinButtonActionPerformed

    private void filtersComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtersComboBoxActionPerformed
        MyInternalFrame mif = (MyInternalFrame) canvasDesktopPanel.getSelectedFrame();
        if (mif != null) {
            BufferedImage sourceImg = mif.getCanvas2d().getImage();
            if (sourceImg != null) {
                try {
                    Kernel k = KernelProducer.createKernel(filtersComboBox.getSelectedIndex());
                    ConvolveOp cop = new ConvolveOp(k, 1, null);
                    BufferedImage destImg = cop.filter(sourceImg, null);
                    mif.getCanvas2d().setImage(destImg);
                    mif.getCanvas2d().repaint();
                } catch (Exception e) {
                    System.err.println("Error: " + e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_filtersComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton alphaToggleButton;
    private javax.swing.JMenuItem attributesMenuItem;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JToolBar bottomToolBar;
    private javax.swing.JSlider brightSlider;
    private javax.swing.JPanel brightnessPanel;
    private javax.swing.JDesktopPane canvasDesktopPanel;
    private javax.swing.ButtonGroup colorsButtonGroup;
    private javax.swing.JComboBox<String> colorsComboBox;
    private javax.swing.JPanel contrastPanel;
    private javax.swing.JButton darkContrastButton;
    private javax.swing.JToggleButton dotToggleButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JToggleButton ellipseToggleButton;
    private javax.swing.ButtonGroup figuresButtonGroup;
    private javax.swing.JMenuItem figuresMenuItem;
    private javax.swing.JToolBar figuresToolBar;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JToggleButton fillToggleButton;
    private javax.swing.JComboBox<String> filtersComboBox;
    private javax.swing.JPanel filtersPanel;
    private javax.swing.JPanel functionPanel;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JButton lightContrastButton;
    private javax.swing.JToggleButton lineToggleButton;
    private javax.swing.JButton minusButton;
    private javax.swing.JButton newButton;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JButton normalContrastButton;
    private javax.swing.JButton openButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton plusButton;
    private javax.swing.JButton r180Button;
    private javax.swing.JButton r270Button;
    private javax.swing.JButton r90Button;
    private javax.swing.JToggleButton rectanbleToggleButton;
    private javax.swing.JMenuItem rescaleMenuItem;
    private javax.swing.JPanel rotationPanel;
    private javax.swing.JSlider rotationSlider;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JPanel scalePanel;
    private javax.swing.JButton sinButton;
    private javax.swing.JToggleButton smoothToggleButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JMenuItem statusMenuItem;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JSpinner thicknessSpinner;
    private javax.swing.JMenuBar topMenuBar;
    // End of variables declaration//GEN-END:variables
}
